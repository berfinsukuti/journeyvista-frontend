{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\journeyvista\\\\journeyvista-frontend\\\\src\\\\Map.js\";\n// import React, { useEffect } from 'react';\n// import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\n// import 'leaflet/dist/leaflet.css'; // Leaflet CSS\n// import { calculateDay, formatDate } from './utils'; // Yardımcı fonksiyonlar\n// import L from 'leaflet'; // Custom ikon için\n\n// // Özel ikon ayarı\n// const customIcon = new L.Icon({\n//   iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\n//   iconSize: [32, 32],\n//   iconAnchor: [16, 32]\n// });\n\n// const Map = ({ tours, selectedTour }) => {\n//   const map = useMap(); // Haritaya erişim sağlar\n\n//   // Seçilen tura odaklan\n//   useEffect(() => {\n//     if (selectedTour) {\n//       const todayDayNumber = calculateDay(selectedTour.start_date);\n//       const todayCity = selectedTour.days.find(day => day.day_number === todayDayNumber);\n//       if (todayCity) {\n//         map.setView([todayCity.latitude, todayCity.longitude], 10); // Marker'ın olduğu yere zoom yapar\n//       }\n//     }\n//   }, [selectedTour, map]);\n\n//   return (\n//     <MapContainer\n//       center={[41.0082, 28.9784]} // Başlangıç konumu (İstanbul)\n//       zoom={6}\n//       style={{ height: '100%', width: '100%' }}\n//     >\n//       <TileLayer\n//         url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n//         attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n//       />\n\n//       {tours.map(tour => {\n//         const todayDayNumber = calculateDay(tour.start_date);\n//         const todayCity = tour.days.find(day => day.day_number === todayDayNumber);\n\n//         if (!todayCity) return null;\n\n//         return (\n//           <Marker\n//             key={tour.id}\n//             position={[todayCity.latitude, todayCity.longitude]}\n//             icon={customIcon}\n//           >\n//             <Popup>\n//               <h3>{tour.name}</h3>\n//               <img\n//                 src={`http://127.0.0.1:8000${tour.image}`}\n//                 alt={tour.name}\n//                 style={{ width: '100%', height: 'auto', marginBottom: '10px' }}\n//               />\n//               <p>Rehber: {tour.guide}</p>\n//               <p>Başlangıç Tarihi: {formatDate(tour.start_date)}</p>\n//               <p>Bitiş Tarihi: {formatDate(tour.end_date)}</p>\n//               <p>Bugün: {todayDayNumber}. Gün</p>\n//               <p>Şehir: {todayCity.city}</p>\n//               <p>Açıklama: {todayCity.description}</p>\n//             </Popup>\n//           </Marker>\n//         );\n//       })}\n//     </MapContainer>\n//   );\n// };\n\n// export default Map;\nimport React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\nimport L from 'leaflet';\n\n// Özel marker ikonu\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst customIcon = new L.Icon({\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\n  iconSize: [32, 32],\n  iconAnchor: [16, 32]\n});\nconst Map = ({\n  tours,\n  cities,\n  selectedTour\n}) => {\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [41.0082, 28.9784] // Harita başlangıç merkezi (örneğin, İstanbul)\n    ,\n    zoom: 6,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), tours.map(tour => {\n      const todayDayNumber = Math.floor((new Date() - new Date(tour.start_date)) / (1000 * 60 * 60 * 24));\n      const todayCity = tour.days.find(day => day.day_number === todayDayNumber);\n      if (!todayCity) return null;\n      const cityInfo = cities.find(city => city.name === todayCity.city);\n      if (!cityInfo) return null;\n      return /*#__PURE__*/_jsxDEV(Marker, {\n        position: [cityInfo.latitude, cityInfo.longitude],\n        icon: customIcon,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: tour.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Bug\\xFCn: \", todayDayNumber + 1, \". G\\xFCn\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"\\u015Eehir: \", todayCity.city]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"A\\xE7\\u0131klama: \", todayCity.description]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this)\n      }, tour.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","customIcon","Icon","iconUrl","iconSize","iconAnchor","Map","tours","cities","selectedTour","center","zoom","style","height","width","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","map","tour","todayDayNumber","Math","floor","Date","start_date","todayCity","days","find","day","day_number","cityInfo","city","name","position","latitude","longitude","icon","description","id","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/journeyvista/journeyvista-frontend/src/Map.js"],"sourcesContent":["// import React, { useEffect } from 'react';\r\n// import { MapContainer, TileLayer, Marker, Popup, useMap } from 'react-leaflet';\r\n// import 'leaflet/dist/leaflet.css'; // Leaflet CSS\r\n// import { calculateDay, formatDate } from './utils'; // Yardımcı fonksiyonlar\r\n// import L from 'leaflet'; // Custom ikon için\r\n\r\n// // Özel ikon ayarı\r\n// const customIcon = new L.Icon({\r\n//   iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\r\n//   iconSize: [32, 32],\r\n//   iconAnchor: [16, 32]\r\n// });\r\n\r\n// const Map = ({ tours, selectedTour }) => {\r\n//   const map = useMap(); // Haritaya erişim sağlar\r\n\r\n//   // Seçilen tura odaklan\r\n//   useEffect(() => {\r\n//     if (selectedTour) {\r\n//       const todayDayNumber = calculateDay(selectedTour.start_date);\r\n//       const todayCity = selectedTour.days.find(day => day.day_number === todayDayNumber);\r\n//       if (todayCity) {\r\n//         map.setView([todayCity.latitude, todayCity.longitude], 10); // Marker'ın olduğu yere zoom yapar\r\n//       }\r\n//     }\r\n//   }, [selectedTour, map]);\r\n\r\n//   return (\r\n//     <MapContainer\r\n//       center={[41.0082, 28.9784]} // Başlangıç konumu (İstanbul)\r\n//       zoom={6}\r\n//       style={{ height: '100%', width: '100%' }}\r\n//     >\r\n//       <TileLayer\r\n//         url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n//         attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n//       />\r\n\r\n//       {tours.map(tour => {\r\n//         const todayDayNumber = calculateDay(tour.start_date);\r\n//         const todayCity = tour.days.find(day => day.day_number === todayDayNumber);\r\n\r\n//         if (!todayCity) return null;\r\n\r\n//         return (\r\n//           <Marker\r\n//             key={tour.id}\r\n//             position={[todayCity.latitude, todayCity.longitude]}\r\n//             icon={customIcon}\r\n//           >\r\n//             <Popup>\r\n//               <h3>{tour.name}</h3>\r\n//               <img\r\n//                 src={`http://127.0.0.1:8000${tour.image}`}\r\n//                 alt={tour.name}\r\n//                 style={{ width: '100%', height: 'auto', marginBottom: '10px' }}\r\n//               />\r\n//               <p>Rehber: {tour.guide}</p>\r\n//               <p>Başlangıç Tarihi: {formatDate(tour.start_date)}</p>\r\n//               <p>Bitiş Tarihi: {formatDate(tour.end_date)}</p>\r\n//               <p>Bugün: {todayDayNumber}. Gün</p>\r\n//               <p>Şehir: {todayCity.city}</p>\r\n//               <p>Açıklama: {todayCity.description}</p>\r\n//             </Popup>\r\n//           </Marker>\r\n//         );\r\n//       })}\r\n//     </MapContainer>\r\n//   );\r\n// };\r\n\r\n// export default Map;\r\nimport React from 'react';\r\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css'; // Leaflet CSS\r\nimport L from 'leaflet';\r\n\r\n// Özel marker ikonu\r\nconst customIcon = new L.Icon({\r\n  iconUrl: 'https://cdn-icons-png.flaticon.com/512/684/684908.png',\r\n  iconSize: [32, 32],\r\n  iconAnchor: [16, 32],\r\n});\r\n\r\nconst Map = ({ tours, cities, selectedTour }) => {\r\n  return (\r\n    <MapContainer\r\n      center={[41.0082, 28.9784]} // Harita başlangıç merkezi (örneğin, İstanbul)\r\n      zoom={6}\r\n      style={{ height: '100%', width: '100%' }}\r\n    >\r\n      {/* Harita katmanı */}\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution=\"&copy; <a href='https://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors\"\r\n      />\r\n\r\n      {/* Marker'lar */}\r\n      {tours.map((tour) => {\r\n        const todayDayNumber = Math.floor(\r\n          (new Date() - new Date(tour.start_date)) / (1000 * 60 * 60 * 24)\r\n        );\r\n        const todayCity = tour.days.find((day) => day.day_number === todayDayNumber);\r\n\r\n        if (!todayCity) return null;\r\n\r\n        const cityInfo = cities.find((city) => city.name === todayCity.city);\r\n\r\n        if (!cityInfo) return null;\r\n\r\n        return (\r\n          <Marker\r\n            key={tour.id}\r\n            position={[cityInfo.latitude, cityInfo.longitude]}\r\n            icon={customIcon}\r\n          >\r\n            <Popup>\r\n              <h3>{tour.name}</h3>\r\n              <p>Bugün: {todayDayNumber + 1}. Gün</p>\r\n              <p>Şehir: {todayCity.city}</p>\r\n              <p>Açıklama: {todayCity.description}</p>\r\n            </Popup>\r\n          </Marker>\r\n        );\r\n      })}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}